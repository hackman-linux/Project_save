# Generated by Django 4.2.7 on 2025-09-09 17:53

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DailyMenu',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date', models.DateField(unique=True)),
                ('special_message', models.TextField(blank=True)),
                ('is_published', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_daily_menus', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Daily Menu',
                'verbose_name_plural': 'Daily Menus',
                'db_table': 'daily_menu',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='MenuCategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('icon', models.CharField(default='bi-card-list', help_text='Bootstrap icon class name', max_length=50)),
                ('color', models.CharField(default='primary', help_text='Bootstrap color class', max_length=20)),
                ('display_order', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_categories', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Menu Category',
                'verbose_name_plural': 'Menu Categories',
                'db_table': 'menu_category',
                'ordering': ['display_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='MenuItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('price', models.DecimalField(decimal_places=2, max_digits=8, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('image', models.ImageField(blank=True, null=True, upload_to='menu_items/')),
                ('calories', models.PositiveIntegerField(blank=True, null=True)),
                ('spice_level', models.CharField(choices=[('none', 'Not Spicy'), ('mild', 'Mild'), ('medium', 'Medium'), ('hot', 'Hot'), ('very_hot', 'Very Hot')], default='none', max_length=20)),
                ('dietary_tags', models.JSONField(blank=True, default=list, help_text='List of dietary tags')),
                ('allergens', models.TextField(blank=True, help_text='List allergens separated by commas')),
                ('is_available', models.BooleanField(default=True)),
                ('daily_limit', models.PositiveIntegerField(default=100, help_text='Maximum orders per day, 0 for unlimited')),
                ('current_stock', models.PositiveIntegerField(default=100)),
                ('low_stock_threshold', models.PositiveIntegerField(default=10)),
                ('preparation_time', models.PositiveIntegerField(default=15, help_text='Preparation time in minutes')),
                ('cooking_instructions', models.TextField(blank=True)),
                ('total_orders', models.PositiveIntegerField(default=0)),
                ('average_rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)])),
                ('total_reviews', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_special', models.BooleanField(default=False)),
                ('special_price', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('special_until', models.DateTimeField(blank=True, null=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='menu_items', to='menu.menucategory')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_menu_items', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Menu Item',
                'verbose_name_plural': 'Menu Items',
                'db_table': 'menu_item',
                'ordering': ['-is_featured', '-is_special', 'category__display_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='MenuItemIngredient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('is_allergen', models.BooleanField(default=False)),
                ('dietary_restrictions', models.JSONField(default=list, help_text='List of dietary restrictions this ingredient affects')),
            ],
            options={
                'verbose_name': 'Ingredient',
                'verbose_name_plural': 'Ingredients',
                'db_table': 'menu_item_ingredient',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='DailyMenuItems',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('daily_price', models.DecimalField(blank=True, decimal_places=2, help_text='Override price for this day', max_digits=8, null=True)),
                ('daily_stock', models.PositiveIntegerField(blank=True, help_text='Override stock for this day', null=True)),
                ('is_featured_today', models.BooleanField(default=False)),
                ('display_order', models.PositiveIntegerField(default=0)),
                ('daily_menu', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='daily_menu_items', to='menu.dailymenu')),
                ('menu_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='daily_menu_items', to='menu.menuitem')),
            ],
            options={
                'db_table': 'daily_menu_items',
                'ordering': ['display_order', 'menu_item__name'],
            },
        ),
        migrations.AddField(
            model_name='dailymenu',
            name='menu_items',
            field=models.ManyToManyField(related_name='daily_menus', through='menu.DailyMenuItems', to='menu.menuitem'),
        ),
        migrations.CreateModel(
            name='MenuItemReview',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('rating', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('comment', models.TextField(blank=True)),
                ('is_verified_purchase', models.BooleanField(default=False)),
                ('helpful_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('menu_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='menu.menuitem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='menu_reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Menu Item Review',
                'verbose_name_plural': 'Menu Item Reviews',
                'db_table': 'menu_item_review',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['menu_item', 'rating'], name='menu_item_r_menu_it_ba36c5_idx'), models.Index(fields=['is_verified_purchase'], name='menu_item_r_is_veri_96e761_idx')],
                'unique_together': {('menu_item', 'user')},
            },
        ),
        migrations.CreateModel(
            name='MenuItemIngredientRelation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.CharField(blank=True, max_length=50)),
                ('is_optional', models.BooleanField(default=False)),
                ('ingredient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='menu_item_relations', to='menu.menuitemingredient')),
                ('menu_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ingredient_relations', to='menu.menuitem')),
            ],
            options={
                'db_table': 'menu_item_ingredient_relation',
                'unique_together': {('menu_item', 'ingredient')},
            },
        ),
        migrations.CreateModel(
            name='MenuItemFavorite',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('menu_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorited_by', to='menu.menuitem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorite_items', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'menu_item_favorite',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user'], name='menu_item_f_user_id_b35fea_idx')],
                'unique_together': {('user', 'menu_item')},
            },
        ),
        migrations.AddIndex(
            model_name='menuitem',
            index=models.Index(fields=['is_available'], name='menu_item_is_avai_85c7c7_idx'),
        ),
        migrations.AddIndex(
            model_name='menuitem',
            index=models.Index(fields=['is_featured'], name='menu_item_is_feat_4ae7e0_idx'),
        ),
        migrations.AddIndex(
            model_name='menuitem',
            index=models.Index(fields=['is_special'], name='menu_item_is_spec_b5e11a_idx'),
        ),
        migrations.AddIndex(
            model_name='menuitem',
            index=models.Index(fields=['category', 'is_available'], name='menu_item_categor_c58e14_idx'),
        ),
        migrations.AddIndex(
            model_name='menuitem',
            index=models.Index(fields=['total_orders'], name='menu_item_total_o_a744a4_idx'),
        ),
        migrations.AddIndex(
            model_name='menucategory',
            index=models.Index(fields=['is_active'], name='menu_catego_is_acti_949851_idx'),
        ),
        migrations.AddIndex(
            model_name='menucategory',
            index=models.Index(fields=['display_order'], name='menu_catego_display_20b596_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='dailymenuitems',
            unique_together={('daily_menu', 'menu_item')},
        ),
        migrations.AddIndex(
            model_name='dailymenu',
            index=models.Index(fields=['date'], name='daily_menu_date_a2ec82_idx'),
        ),
        migrations.AddIndex(
            model_name='dailymenu',
            index=models.Index(fields=['is_published'], name='daily_menu_is_publ_f7f8fe_idx'),
        ),
    ]
