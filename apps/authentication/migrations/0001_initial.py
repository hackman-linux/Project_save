# Generated by Django 4.2.7 on 2025-09-09 17:53

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(db_index=True, max_length=254, unique=True)),
                ('phone_number', models.CharField(help_text='Cameroon phone number format', max_length=17, unique=True, validators=[django.core.validators.RegexValidator(message='Phone number must be in Cameroon format: +237XXXXXXXXX', regex='^\\+?237?[2368]\\d{7,8}$')])),
                ('role', models.CharField(choices=[('employee', 'Employee'), ('canteen_admin', 'Canteen Admin'), ('system_admin', 'System Admin')], default='employee', max_length=20)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('suspended', 'Suspended')], default='active', max_length=20)),
                ('employee_id', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('department', models.CharField(blank=True, max_length=100)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures/')),
                ('wallet_balance', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('preferred_payment_method', models.CharField(choices=[('wallet', 'Wallet'), ('mtn_momo', 'MTN Mobile Money'), ('orange_money', 'Orange Money')], default='wallet', max_length=20)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_email_verified', models.BooleanField(default=False)),
                ('email_verification_token', models.CharField(blank=True, max_length=100)),
                ('password_reset_token', models.CharField(blank=True, max_length=100)),
                ('password_reset_expires', models.DateTimeField(blank=True, null=True)),
                ('last_activity', models.DateTimeField(blank=True, null=True)),
                ('login_count', models.PositiveIntegerField(default=0)),
                ('failed_login_attempts', models.PositiveIntegerField(default=0)),
                ('account_locked_until', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'auth_user',
                'ordering': ['-date_joined'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='SystemConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_name', models.CharField(default='Canteen Management System', max_length=100)),
                ('app_version', models.CharField(default='1.0.0', max_length=20)),
                ('timezone', models.CharField(default='UTC', max_length=50)),
                ('currency', models.CharField(default='XAF', max_length=10)),
                ('language', models.CharField(default='en', max_length=10)),
                ('opening_time', models.TimeField(default='08:00')),
                ('closing_time', models.TimeField(default='18:00')),
                ('order_processing_time', models.IntegerField(default=15)),
                ('max_daily_orders', models.IntegerField(default=200)),
                ('cancellation_window', models.IntegerField(default=10)),
                ('allow_advance_orders', models.BooleanField(default=True)),
                ('mtn_enabled', models.BooleanField(default=True)),
                ('mtn_api_key', models.CharField(blank=True, max_length=255, null=True)),
                ('mtn_merchant_id', models.CharField(blank=True, max_length=100, null=True)),
                ('mtn_environment', models.CharField(default='sandbox', max_length=20)),
                ('orange_enabled', models.BooleanField(default=False)),
                ('orange_api_key', models.CharField(blank=True, max_length=255, null=True)),
                ('orange_merchant_id', models.CharField(blank=True, max_length=100, null=True)),
                ('orange_environment', models.CharField(default='sandbox', max_length=20)),
                ('payment_timeout', models.IntegerField(default=120)),
                ('transaction_fee', models.DecimalField(decimal_places=2, default=2.5, max_digits=5)),
                ('min_order_amount', models.DecimalField(decimal_places=2, default=100, max_digits=10)),
                ('auto_refund', models.BooleanField(default=True)),
                ('email_enabled', models.BooleanField(default=True)),
                ('smtp_server', models.CharField(default='smtp.example.com', max_length=100)),
                ('smtp_port', models.IntegerField(default=587)),
                ('from_email', models.EmailField(default='admin@example.com', max_length=254)),
                ('smtp_username', models.CharField(blank=True, max_length=100, null=True)),
                ('smtp_password', models.CharField(blank=True, max_length=100, null=True)),
                ('sms_enabled', models.BooleanField(default=False)),
                ('sms_provider', models.CharField(default='twilio', max_length=50)),
                ('sms_api_key', models.CharField(blank=True, max_length=255, null=True)),
                ('sms_from_number', models.CharField(blank=True, max_length=20, null=True)),
                ('push_enabled', models.BooleanField(default=False)),
                ('firebase_server_key', models.CharField(blank=True, max_length=255, null=True)),
                ('session_timeout', models.IntegerField(default=60)),
                ('password_min_length', models.IntegerField(default=8)),
                ('require_uppercase', models.BooleanField(default=True)),
                ('require_numbers', models.BooleanField(default=True)),
                ('require_special_chars', models.BooleanField(default=False)),
                ('max_login_attempts', models.IntegerField(default=5)),
                ('lockout_duration', models.IntegerField(default=15)),
                ('enable_2fa', models.BooleanField(default=False)),
                ('log_security_events', models.BooleanField(default=True)),
                ('require_password_change', models.BooleanField(default=False)),
                ('auto_backup', models.BooleanField(default=True)),
                ('backup_frequency', models.CharField(default='daily', max_length=20)),
                ('backup_time', models.TimeField(default='02:00')),
                ('backup_retention', models.IntegerField(default=30)),
                ('performance_monitoring', models.BooleanField(default=True)),
                ('log_level', models.CharField(default='INFO', max_length=20)),
                ('log_retention', models.IntegerField(default=30)),
                ('email_alerts', models.BooleanField(default=True)),
                ('maintenance_mode', models.BooleanField(default=False)),
                ('maintenance_message', models.TextField(default='System under maintenance, please check back later.')),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'System Configuration',
                'verbose_name_plural': 'System Configuration',
            },
        ),
        migrations.CreateModel(
            name='UserSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(max_length=40, unique=True)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Session',
                'verbose_name_plural': 'User Sessions',
                'db_table': 'user_session',
                'ordering': ['-last_activity'],
            },
        ),
        migrations.CreateModel(
            name='UserActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_type', models.CharField(choices=[('login', 'Login'), ('logout', 'Logout'), ('order_placed', 'Order Placed'), ('payment_made', 'Payment Made'), ('profile_updated', 'Profile Updated'), ('password_changed', 'Password Changed'), ('admin_action', 'Admin Action')], max_length=20)),
                ('description', models.TextField()),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('extra_data', models.JSONField(blank=True, default=dict)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Activity',
                'verbose_name_plural': 'User Activities',
                'db_table': 'user_activity',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['user', 'timestamp'], name='user_activi_user_id_3b1b11_idx'), models.Index(fields=['activity_type'], name='user_activi_activit_cdda35_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='auth_user_email_ece7f7_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['role'], name='auth_user_role_f90fd2_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['status'], name='auth_user_status_79e21c_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['employee_id'], name='auth_user_employe_d6f0da_idx'),
        ),
    ]
